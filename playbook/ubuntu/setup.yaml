---
########################## Check_list for all ubuntu - debbian hosts ##########################
- name: Setup OS
  hosts: all
  gather_facts: false
  become: yes
  tasks:

    - name: Install package
      apt:
        update_cache: yes
        name: 
          - python3-pip

    - name: Install pip package
      pip:
        name: pexpect

    - name: Switch to bin/bash
      shell: ln -sf /bin/bash /bin/sh

    - name: check no necessary package
      shell:
        check=`dpkg --get-selections | grep deinstall | cut -f1`; [[ ! -z $check ]] && dpkg --purge $check || echo "";
        # - name: update and upgrade
        #   shell:
        #     apt update && apt upgrade

        # - name: check list user
        #   shell: |
        #     check=`cat /etc/passwd | grep sh$ | awk -F: '{print $1}' | grep -Ev "^root|^user1"`; if [[ -z $check  ]]; then echo "OK";else echo "WARNING"; fi; echo "";
        #   register: check_list_user
        #   ignore_errors: True

        # - name: Check Allowers Users
        #   shell: |
        #     list=`cat /etc/passwd |grep sh$  | grep -v ^# | grep -v nfsnobody | awk -F: '($3>=400) {print $1}'`; check=`sudo cat /etc/ssh/sshd_config | grep -v ^# | grep -w AllowUsers`; result=`for user in $list; do if [[ $check == *$user* ]]; then echo "OK"; else echo "WARNING";fi ;done`; if [[ $result == *WARNING* ]]; then echo "WARNING"; else echo "OK";fi;
        #   register: check_allow_users
        #   ignore_errors: True

    - name: Set IPtables
      shell: check=`dpkg -l | grep "iptables-persistent"`; [[ -z $check ]] && apt install iptables iptables-persistent || echo "";

    - name: Set netfilter-persistent
      shell:
        standard=`echo -e "Active:\ active"`; check=`systemctl status iptables | grep "$standard"`; [[ -z $check ]] && apt install netfilter-persistent && systemctl enable netfilter-persistent && systemctl restart netfilter-persistent || echo "";

        # - name: Checklist application using root
        #   shell: check=`ps -ef | grep ^root | grep "java\|tomcat\|jre\|jdk" | grep -v grep`; if [ -z $check ];then echo "OK";else echo "WARNING"; fi; echo "";
        #   register: app_using_root

    - name: Set timezone
      shell: check=`date +"%Z %z" | grep -w 0700`; if [[ $check != *0700* ]]; then `timedatectl set-timezone Asia/Ho_Chi_Minh`; fi ;

    - name: Set bluetooth
      shell: |
        check=`systemctl status bluetooth | grep "Active: active"`; [[ ! -z $check ]] && systemctl stop bluetooth && systemctl disable bluetooth || echo ""
      ignore_errors: true

    - name: checklist SSh Protocol2 configured
      shell: check=`cat /etc/ssh/sshd_config | grep -v ^# | grep -w "Protocol 2"`; if [[ -z $check ]]; then echo "Protocol 2" >> /etc/ssh/sshd_config;fi;
      ignore_errors: True

        # - name: check config password
        #   shell: standard="minlen=8 ucredit=-1 lcredit=-1 dcredit=-1 ocredit=-1"; check=`cat /etc/pam.d/common-password | grep ^password.*requisite.*pam_cracklib\.so`; result=`for patern in $standard;do if [[ $check == *$patern* ]];then echo "OK"; else echo "NULL";fi;done`; if [[ $result == *NULL* ]]; then echo "WARNING"; else echo "OK";fi
        #   register: check_conf_pass
        #   ignore_errors: True

        # - name: check config password sha512
        #   shell: |
        #     dir1="/etc/pam.d/common-password"; \
        #     dir2="/etc/login.defs"; \
        #     dir3="/etc/libuser.conf" \
        #     check1=`cat $dir1 | grep ^# | grep -w 'sha512' | grep -w 'shadow' | grep 'remember=5'`; \
        #     check2=`cat $dir2 | grep -E 'MD5_CRYPT_ENAB no|ENCRYPT_METHOD SHA512'`; \
        #     check3=`cat $dir3 | grep -E 'crypt_style = sha512'`; \
        #     [[ ! -r $dir1 || ! -r $dir2 || ! -r $dir3 ]] && (echo 'WARNING') || ([[ ! -z $check1 && ! -z $check2 && ! -z $check3 ]] && (echo 'OK') || (echo 'WARNING'))
        #   register: check_conf_pass_sha
        #   ignore_errors: True

    - name: Set TMOUT
      shell: check=`cat /etc/profile | grep -v ^# | grep -E -o "TMOUT=300|readonly TMOUT|export TMOUT"`; if [[ -z $check ]]; then echo -e "TMOUT=300\nreadonly TMOUT\nexport TMOUT" >> /etc/profile; fi;

    - name: check PermitRootLogin
      shell: check=`cat /etc/ssh/sshd_config | grep -v ^# | grep -w "PermitRootLogin no"`; if [[ -z $check ]]; then echo "PermitRootLogin no" >> /etc/ssh/sshd_config; fi;

    - name: set nf_conntrack_max
      shell: |
        line='echo "524288" > /proc/sys/net/netfilter/nf_conntrack_max';file="/proc/sys/net/nf_conntrack_max"; check=`cat $file`; [[ ! -f $file ]] && echo "WARNING" || ([[ $check -lt 524288 ]] && echo "524288" > /proc/sys/net/netfilter/nf_conntrack_max && sed -i "/exit 0/iecho 524288 > /proc/sys/net/netfilter/nf_conntrack_max" /etc/rc.local || echo "")
      ignore_errors: true

    - name: set nf_conntrack_buckets
      shell: file="/proc/sys/net/netfilter/nf_conntrack_buckets"; check=`cat $file`; [[ ! -f $file ]] && echo "WARNING" || ([[ $check -lt 131072 ]] && echo "131072" > /proc/sys/net/netfilter/nf_conntrack_buckets && sed -i "/exit 0/iecho 131072 > /proc/sys/net/netfilter/nf_conntrack_buckets" /etc/rc.local || echo "")
      ignore_errors:
        true

        # - name: checklist group
        #   shell: standard=`echo -e "%sudo\tALL=(ALL:ALL) ALL"`; check=`sudo cat /etc/sudoers | grep -v ^# | grep "$standard"`; if [ -z $check ]; then echo "OK"; else echo "WARNING";fi; echo "";
        #   register: checklist_group

    - name: Set crontab service
      shell: |
        check_status=`systemctl status cron | grep "Active: active"`;check_deny=`ls /etc/ | grep cron.deny`; check_allow=`ls /etc/ | grep cron.allow`; [[ -z $check_status ]] && apt install cron && systemctl enable cron && systemctl start cron || echo ""; [[ ! -z $check_deny ]] && rm -f /etc/cron.deny || echo ""; [[ -z $check_allow ]] && touch /etc/cron.allow || echo "";
      ignore_errors:
        True

        # - name: check crontab maximum config
        #   shell: check1=`crontab -l | grep -v ^# | grep -v "sd_agent" | grep -v "scms-agent"`; check2=`crontab -l | grep -v ^# | grep sd_agent | grep sd_agent_monitor.sh`; check3=`crontab -l | grep -v ^# | grep scms-agent | grep scms-mon`; if [[ -z $check2 ]]; then echo "WARNING"; elif [[ -z $check3 ]]; then echo "WARNING"; elif [[ ! -z $check1 ]]; then echo "WARNING"; else echo "OK"; fi
        #   register: check_crontab_max_conf
        #   ignore_errors: true

    - name: Set 90 days to change pass
      shell: check=`cat /etc/login.defs | grep 'PASS_MAX_DAYS 90'`; [[ -z $check ]] && echo -e "PASS_MAX_DAYS 90" >> /etc/login.defs || echo "";
      ignore_errors: true

    - name: check rc-local
      shell: |
        check=`systemctl status rc-local | grep -w "Active: active"`; [[ -z $check ]] && touch /etc/rc.local && echo -e '#!/bin/sh\nexit 0' > /etc/rc.local && chmod +x /etc/rc.local && systemctl enable rc-local && systemctl start rc-local || echo "";
      ignore_errors: true

    - name: Set bluetooth
      shell: |
        check=`systemctl status bluetooth | grep "Active: active"`; [[ ! -z $check ]] && systemctl stop bluetooth && systemctl disable bluetooth || echo ""
      ignore_errors: true

    - name: Set cups
      shell: |
        check=`systemctl status cups | grep "Active: active"`; [[ ! -z $check ]] && systemctl stop cups && systemctl disable cups|| echo ""
      ignore_errors: true

    - name: Install kdump
      apt:
        name: linux-crashdump
        update_cache: yes
      async: 20
      ignore_errors: true
    
    - name: Set crashkernel
      shell: |
        [[ -z `cat /etc/default/grub | grep "GRUB_TIMEOUT=5"` || -z `cat /etc/default/grub | grep "crashkernel=128M"` ]] && sed -i 's/GRUB_TIMEOUT=\S*/GRUB_TIMEOUT=5/g' /etc/default/grub && sed -i 's/GRUB_CMDLINE_LINUX="/GRUB_CMDLINE_LINUX="crashkernel=128M/g' /etc/default/grub || echo "";
      ignore_errors: true

    - name: Set sendmail
      shell: |
        check=`systemctl status sendmail | grep "Active: active"`; [[ ! -z $check ]] && systemctl stop sendmail && systemctl disable sendmail || echo ""
      ignore_errors: true

    - name: Set postfix
      shell: |
        check=`systemctl status postfix | grep "Active: active"`; [[ ! -z $check ]] && systemctl stop postfix && systemctl disable postfix || echo ""
      ignore_errors: true


