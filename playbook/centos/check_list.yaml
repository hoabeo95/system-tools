---
########################## Check_list for all CentOS - Fedora hosts ##########################
- name: Checklist OS
  hosts: all
  gather_facts: yes
  become:
    yes
    # serial: 1
  tasks:
    - name: Check system OS
      shell: . /etc/os-release; echo "$NAME"
      register: sys_os
      ignore_errors: true

    - name: Check IPtables
      shell: standard=`echo -e "Active:\ active"`; check=`systemctl status iptables | grep "$standard"`; if [[ -z $check ]]; then echo "WARNING"; else echo "OK";fi;
      register: iptables
      ignore_errors: True

    - name: Check Allowers Users
      shell: |
        list=`cat /etc/passwd |grep sh$  | grep -v ^# | grep -v nfsnobody | awk -F: '($3>=400) {print $1}'`; check=`sudo cat /etc/ssh/sshd_config | grep -v ^# | grep -w AllowUsers`; result=`for user in $list; do if [[ $check == *$user* ]]; then echo "OK"; else echo "WARNING";fi ;done`; if [[ $result == *WARNING* ]]; then echo "WARNING"; else echo "OK";fi;
      register: check_allow_users
      ignore_errors: True

    - name: check list user
      shell: |
        check=`cat /etc/passwd | grep sh$ | awk -F: '{print $1}' | grep -Ev "^root|^user1"`; if [[ -z $check  ]]; then echo "OK";else echo "WARNING"; fi;
      register: check_list_user
      ignore_errors: True

    - name: Checklist application using root
      shell: check=`ps -ef | grep ^root | grep "java\|tomcat\|jre\|jdk" | grep -v grep`; if [ -z $check ];then echo "OK";else echo "WARNING"; fi;
      register: app_using_root

    - name: Checklist Timezone
      shell: check=`date +"%Z %z" | grep -w 0700`; if [[ $check == *0700* ]]; then echo "OK";else echo "WARNING"; fi; echo "";
      register: timezone

    - name: checklist SSh Protocol2 configured
      shell: check=`sudo cat /etc/ssh/sshd_config | grep -v ^# | grep -w "Protocol 2"`; if [ -z $check ]; then echo "WARNING"; else echo "OK";fi;
      register: ssh_protocol2

    - name: check config password
      shell: standard="minlen=8 ucredit=-1 lcredit=-1 dcredit=-1 ocredit=-1 remember=8 sha512"; check=`cat /etc/pam.d/common-password | grep ^password*`; result=`for patern in $standard;do if [[ $check == *$patern* ]];then echo "OK"; else echo "NULL";fi;done`; if [[ $result == *NULL* ]]; then echo "WARNING"; else echo "OK";fi
      register: check_conf_pass
      ignore_errors: True

    - name: check TMOUT
      shell: check=`cat /etc/profile | grep -v ^# | grep -E "TMOUT=300|readonly TMOUT|export TMOUT"`; if [[ -z $check ]]; then echo "WVMwareARNING"; else echo "OK";fi;
      register: tmout_check

    - name: check PermitRootLogin
      shell: check=`cat /etc/ssh/sshd_config | grep -v ^# | grep -w "PermitRootLogin no"`; if [[ -z $check ]]; then echo "WARNING"; else echo "OK";fi; echo "";
      register: permit_root_login

    - name: check nf_conntrack_max
      shell: standard="/proc/sys/net/nf_conntrack_max"; check=`cat $standard`; if [[ -z $check ]]; then echo "WARNING"; elif [ $check -lt 524288 ]; then echo "WARNING"; else echo "OK";fi; echo "";
      register: check_conntrack_max

    - name: checklist group
      shell: standard=`echo -e "%wheel\tALL=(ALL)\tALL"`; check=`sudo cat /etc/sudoers | grep -v ^# | grep "$standard"`; if [ -z $check ]; then echo "OK"; else echo "WARNING";fi; echo "";
      register: checklist_group

    - name: check nf_contrack_buckets
      shell: standard="/proc/sys/net/netfilter/nf_conntrack_buckets"; check=`cat $standard`; if [[ -z $check ]]; then echo "WARNING"; elif [ $check -lt 131072 ]; then echo "WARNING"; else echo "OK";fi; echo "";
      register: check_conntrack_buckets

    - name: check crontab service
      shell: |
        check_status=`systemctl status crond | grep "Active: active"`;check_deny=`ls /etc/ | grep cron.deny`; check_allow=`ls /etc/ | grep cron.allow`;if [[ ! -z $check_status && ! -z $check_allow && -z $check_deny ]]; then echo "OK"; else echo "WARNING";fi; echo "";
      register: check_crontab

    - name: Check time 90 days to change pass
      shell: check=`cat /etc/login.defs | grep 'PASS_MAX_DAYS 90'`; [[ -z $check ]] && echo "WARNING" || echo "OK";
      register: check_90day_change_pass
      ignore_errors: true

    - name: check crontab maximum config
      shell: check1=`crontab -l | grep -v ^# | grep -v "sd_agent" | grep -v "scms-agent"`; check2=`crontab -l | grep -v ^# | grep sd_agent | grep sd_agent_monitor.sh`; check3=`crontab -l | grep -v ^# | grep scms-agent | grep scms-mon`; if [[ -z $check2 ]]; then echo "WARNING"; elif [[ -z $check3 ]]; then echo "WARNING"; elif [[ ! -z $check1 ]]; then echo "WARNING"; else echo "OK"; fi
      register: check_crontab_max_conf
      ignore_errors: true

    - name: check network manager disable
      shell: |
        check=`systemctl status NetworkManager | grep "Active: active"`; [[ -z $check ]] && echo "OK" || echo "WARNING";
      register: check_network_manager
      ignore_errors: true

    - name: check bluetooth
      shell: |
        check=`systemctl status bluetooth | grep "Active: active"`; [[ -z $check ]] && echo "OK" || echo "WARNING"
      register: check_bluetooth
      ignore_errors: true

    - name: check cups
      shell: |
        check=`systemctl status cupsd | grep "Active: active"`; [[ -z $check ]] && echo "OK" || echo "WARNING"
      register: check_cups
      ignore_errors: true

    - name: check kdump
      shell: |
        check=`systemctl status kdump | grep "Active: active"`; [[ ! -z $check ]] && echo "OK" || echo "WARNING"
      register: check_kdump
      ignore_errors: true

    - name: check sendmail
      shell: |
        check=`systemctl status sendmail | grep "Active: active"`; [[ -z $check ]] && echo "OK" || echo "WARNING"
      register: check_sendmail
      ignore_errors: true

    - name: check postfix
      shell: |
        check=`systemctl status postfix | grep "Active: active"`; [[ -z $check ]] && echo "OK" || echo "WARNING"
      register: check_postfix
      ignore_errors: true

    - name: check rc-local
      shell: |
        check=`systemctl status rc-local | grep -w "Active: active"`; [[ -z $check ]] && echo "WARNING" || echo "OK"
      register: rc_local_check
      ignore_errors: true

    - name: check virtual brigde
      shell: check=`ifconfig -a | grep "virbr"`; [[ -z $check ]] && echo "OK" || echo "WARNING";
      register: check_virbr
      ignore_errors: true

    - name: check openssl version
      shell: |
        array=("1.0.1e" "1.0.2k" "1.0.1u" "1.0.2j" "1.1.0a" "1.1.0g" "1.0.2n"); variable="WARNING"; for i in "${array[@]}"; do check=`openssl version -a | grep "$i"`; if [[ ! -z $check ]]; then echo "OK"; variable="OK"; break; fi; done; if [[ $variable == WARNING ]]; then echo "$variable";fi;
      register: check_version_openssl
      ignore_errors: True

    - name: check PATH
      shell: |
        check=`echo $PATH | grep "\./\|::\|/tmp"`; if [[ -z $check ]]; then echo "OK"; else echo "WARNING";fi;
      register: check_path
      ignore_errors: True

    - name: check multipath
      shell: |
        [[ ! -z `dmidecode -t system | grep "Product" | grep -i "vmware\|openstack"` ]] && echo "OK" || (list=`dmsetup status| grep -vw linear |awk -F: '{print $1}'| grep -v p[0-9]$| grep -v No`; [[ -z $list ]] && echo "OK" || (check="OK";for line in $list; do path=`multipath -ll $line | grep running$| wc -l`; [[ $path -lt 4 ]] && check="WARNING" && break; done; echo "$check"))
      register: check_multipath
      ignore_errors: True

    - name: check swappiness
      shell: check=`cat /proc/sys/vm/swappiness`; [[ -z $check || $check -gt 10 ]] && echo "WARNING" || echo "OK";
      register: check_swappiness
      ignore_errors: True

    - name: check basic package
      shell: |
        array="telnet sysstat lsof dmidecode net-tools ethtool pciutils iptables ntp ftp nmap iotop wget zip unzip sysfsutils traceroute e2fsprogs"; check="OK"; for i in $array; do installed=`rpm -qa |  grep ^$i-`; [[ -z $installed ]] && check="WARNING" && break;done; echo "$check";
      register: check_basic_pack
      ignore_errors: True

    - name: check haveged
      shell: |
        [[ ! -z `dmidecode -t system | grep "Product" | grep -i "vmware\|openstack"` ]] && echo "OK" || (check=`systemctl status haveged | grep -w "Active: active"`; [[ -z $check ]] && echo "WARNING" || echo "OK")
      register: check_haveged
      ignore_errors: True

    - name: check repo connect
      shell: |
        repo_check=`curl --connect-timeout 3 -s -o /dev/null -I -w "%{http_code}" 10.60.129.132`; [[ $repo_check != 200 ]] && echo "WARNING" || echo "OK";
      register: check_repo_connect
      ignore_errors: True

    - name: check memory swap
      shell: check=`cat /proc/swaps | tail -n+2`; [[ -z $check ]] && echo "WARNING" || echo "OK";
      register: check_memory_swap
      ignore_errors: True

    - name: check mysql active
      shell: check=`ps -ef | grep mysql | grep -v ^root`; [[ -z $check ]] && echo "OK" || echo "WARNING"
      register: check_mysql
      ignore_errors: True

    - name: check bandwidth
      shell: |
        list=`ip a | grep "state UP" | awk '{print $2}'| awk -F: '{print $1}'`; check="OK";for i in $list; do speed=`ethtool "$i" | grep "Speed" | awk '{print $2}'| awk -FM '{print $1}'`; [[ $speed -lt 1000 ]] && check="WARNING" && break; done; echo "$check";
      register: check_bandwidth
      ignore_errors: True

    - name: check file nouser
      shell: check=`find / -xdev \( -nouser -o -nogroup \) -print`; [[ -z $check ]] && echo "OK" || echo "WARNING";
      register: check_file_nouser
      ignore_errors: True

    - name: check max_open_file user
      shell: |
        list=`cat /etc/passwd | grep sh$ | grep -v ^# | grep -v nfsnobody | awk -F: '($3>=400) {print $1}'`; check="OK"; for user in $list;do limit_open=`cat /etc/security/limits.conf | grep -v ^# | grep -w $user | grep -v soft | grep -w nofile`; [[ -z $limit_open ]] && check="WARNING" && break; done; echo "$check"
      register: max_open_file_user
      ignore_errors: True

    - name: check max_open_file server
      shell: |
        check=`cat /proc/sys/fs/file-max`; check2=`cat /etc/sysctl.conf | grep -v ^# | grep -w  fs.file-max`; [[ ! -z $check && ! -z $check2 ]] && echo "OK" || echo "WARNING"
      register: max_open_file_server
      ignore_errors: True

    - name: check max_process user
      shell: |
        list=`cat /etc/passwd | grep sh$ | grep -v ^# | grep -v nfsnobody | awk -F: '($3>=400) {print $1}'`; check="OK"; for user in $list;do limit_open=`cat /etc/security/limits.conf | grep -v ^# | grep -w $user | grep -v soft | grep -w nproc`; [[ -z $limit_open ]] && check="WARNING" && break; done; echo "$check"
      register: max_process
      ignore_errors: True

    - name: check password_expires
      shell: |
        list=`cat /etc/passwd | grep sh$ | grep -v ^# | grep -v nfsnobody | awk -F: '($3>=400) {print $1}'`; check="OK"; for user in $list;do status=`chage -l $user | grep "Password expires" |  awk '{print $4}'`; [[ $status == "never" ]] && check="WARNING" && break; done; echo "$check"
      register: password_expires
      ignore_errors: True

    - name: check /var
      shell: check=`cat /etc/fstab | grep -w "/var"`; [[ -z $check ]] && echo "WARNING" || echo "OK"
      register: check_var
      ignore_errors: True

    - name: check /application
      shell: check=`cat /etc/fstab | grep -vw "#\|/\|/var\|/dev/shm\|/home\|/usr\|/proc\|/sys\|/dev/pts\|/opt\|swap\|/boot\|/boot/efi"`; [[ -z $check ]] && echo "WARNING" || echo "OK"
      register: check_application
      ignore_errors: True

    - name: check SIRC
      shell: check=`/opt/se/salt-call vsm.status | grep "2014\|2017"`; [[ -z $check ]] && echo "WARNING" || echo "OK"
      register: check_sirc
      ignore_errors: True

    - name: check zone_reclaim_mode
      shell: check=`cat /proc/sys/vm/zone_reclaim_mode`; [[ $check != 0 ]] && echo "WARNING" || echo "OK";
      register: zone_reclaim_mode
      ignore_errors: True

    - name: check rsyslog_1
      shell: |
        array=("/var/log/cron" "/var/log/maillog" "/var/log/messages" "/var/log/secure" "/var/log/spooler" "{" "compress" "sharedscripts" "postrotate" "/bin/kill -HUP \`cat /var/run/syslogd.pid 2> /dev/null\` 2> /dev/null || true"  "endscript" "}"); check="OK"; for i in "${array[@]}"; do status=`cat /etc/logrotate.d/rsyslog | grep -v ^# | grep "$i"`; [[ -z $status ]] && check="WARNING" && break ;done; echo "$check";
      register: rsyslog_1
      ignore_errors: True

    - name: check rsyslog_2
      shell: |
        array=("weekly" "rotate 12" "create" "dateext" "include /etc/logrotate.d" "/var/log/wtmp {"  "create 0664 root utmp" "}" "/var/log/btmp {" "create 0600 root utmp" "}"); check="OK"; for i in "${array[@]}"; do status=`cat /etc/logrotate.conf | grep -v ^# | grep -w "$i"`; [[ -z $status ]] && check="WARNING" && break; done; echo "$check";
      register: rsyslog_2
      ignore_errors:
        True

        ########################## Save_result ##########################
- name: Save result
  hosts: all
  tasks:
    - copy:
        content: |
          HOST;OS;CHECK_LISTS_USER;CHECK_BASIC_PACKAGE;IPTABLES;APP_USING_ROOT;TIMEZONE;SSH_PROTOCOL2;CHECK_CONF_PASSWORD;90_DAYS_CHANGE_PASS;CHECK_TMOUT;PERMIT_ROOT_LOGIN;CHECK_ALLOW_USERS;GROUP_SUDO_WHEEL;CHECK_NF_CONNTRACK_MAX;CHECK_CONNTRACK_BUCKETS;CHECK_CRONTAB;CHECK_CRONTAB_MAX_CONF;CHECK_NETWORK_MANAGER;BLUETOOTH;CUPS;CHECK_KDUMP;CHECK_SENDMAIL;CHECK_POSTFIX;RC_LOCAL_CHECK;CHECK_VIRBR;CHECK_VERSION_OPENSSL;CHECK_DANGER_PATH;CHECK_MULTIPATH;CHECK_SWAPPINESS;CHECK_HAVEGED;CHECK_REPO_CONNECT;CHECK_MEMORY_SWAP;CHECK_MYSQL;CHECK_BANDWIDTH;CHECK_FILE_NOUSER;MAX_OPEN_FILE_USER;MAX_OPEN_FILE_SERVER;MAX_PROCESS;CHECK_PASS_EXPIRES;CHECK_VAR;CHECK_APP;CHECK_SIRC;ZONE_RECLAIM_MODE;RSYSLOG_1;RSYSLOG_2
          {% for host in hostvars %}
          {%    set vars = hostvars[host|string] %}
          {{ vars.inventory_hostname }};{{ vars.sys_os.stdout }};{{ vars.check_list_user.stdout }};{{ vars.check_basic_pack.stdout }};{{ vars.iptables.stdout }};{{ vars.app_using_root.stdout }};{{ vars.timezone.stdout }};{{ vars.ssh_protocol2.stdout }};{{ vars.check_conf_pass.stdout }};{{ check_90day_change_pass.stdout }};{{ vars.tmout_check.stdout }};{{ vars.permit_root_login.stdout }};{{ vars.check_allow_users.stdout }};{{ vars.checklist_group.stdout }};{{ vars.check_conntrack_max.stdout }};{{ vars.check_conntrack_buckets.stdout }};{{ vars.check_crontab.stdout }};{{ vars.check_crontab_max_conf.stdout }};{{ vars.check_network_manager.stdout }};{{ vars.check_bluetooth.stdout }};{{ vars.check_cups.stdout }};{{ vars.check_kdump.stdout }};{{ vars.check_sendmail.stdout }};{{ vars.check_postfix.stdout }};{{ vars.rc_local_check.stdout }};{{ vars.check_virbr.stdout }};{{ vars.check_version_openssl.stdout }};{{ vars.check_path.stdout }};{{ vars.check_multipath.stdout }};{{ vars.check_swappiness.stdout }};{{ vars.check_haveged.stdout }};{{ vars.check_repo_connect.stdout }};{{ vars.check_memory_swap.stdout }};{{ vars.check_mysql.stdout }};{{ vars.check_bandwidth.stdout }};{{ vars.check_file_nouser.stdout }};{{ vars.max_open_file_user.stdout }};{{ vars.max_open_file_server.stdout }};{{ vars.max_process.stdout }};{{ vars.password_expires.stdout }};{{ vars.check_var.stdout }};{{ vars.check_application.stdout }};{{ vars.check_sirc.stdout }};{{ vars.zone_reclaim_mode.stdout }};{{ vars.rsyslog_1.stdout }};{{ vars.rsyslog_2.stdout }}
          {% endfor %}
        dest:
          ../../output_centos_family.csv
          #  backup: yes
      run_once: yes
      delegate_to: localhost
